openapi: "3.0.1"
info:
  title: "search-api-v3"
  description: "The HuBMAP Search API is a thin wrapper of the Elasticsearch API.\
    \ It handles data indexing and reindexing into the backend Elasticsearch. It also\
    \ accepts the search query and passes through to the Elasticsearch with data access\
    \ security check."
  version: "3.5.0"
servers:
- url: "https://search.api.hubmapconsortium.org/{basePath}"
  variables:
    basePath:
      default: "v3"
paths:
  /{index}/{proxy+}:
    x-amazon-apigateway-any-method:
      parameters:
      - name: "proxy"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:450834107946:function:HuBMAP-API-Gateway-404/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "xerkbj"
        cacheKeyParameters:
        - "method.request.path.proxy"
        contentHandling: "CONVERT_TO_TEXT"
  /update/{identifier}/{index}/{scope}:
    put:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "scope"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "PUT"
        uri: "http://${stageVariables.VPCNLB}/update/{identifier}/{index}/{scope}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
          integration.request.path.identifier: "method.request.path.identifier"
          integration.request.path.scope: "method.request.path.scope"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "scope"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/update/{identifier}/{index}/{scope}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
          integration.request.path.identifier: "method.request.path.identifier"
          integration.request.path.scope: "method.request.path.scope"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /param-search/{entity_type}:
    get:
      parameters:
      - name: "entity_type"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/param-search/{entity_type}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.entity_type: "method.request.path.entity_type"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      parameters:
      - name: "entity_type"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/param-search/{entity_type}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.entity_type: "method.request.path.entity_type"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /{index}/count:
    get:
      parameters:
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/{index}/count"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      parameters:
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/{index}/count"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /{index}:
    x-amazon-apigateway-any-method:
      parameters:
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:450834107946:function:HuBMAP-API-Gateway-404/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /attribute-values:
    get:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/attribute-values"
        responses:
          default:
            statusCode: "200"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/attribute-values"
        responses:
          default:
            statusCode: "200"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /clear-docs/{index}/{identifier}:
    post:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "POST"
        uri: "http://${stageVariables.VPCNLB}/clear-docs/{index}/{identifier}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
          integration.request.path.identifier: "method.request.path.identifier"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/clear-docs/{index}/{identifier}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
          integration.request.path.identifier: "method.request.path.identifier"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /{index}/mget:
    post:
      parameters:
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "POST"
        uri: "http://${stageVariables.VPCNLB}/{index}/mget"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      parameters:
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/{index}/mget"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /count:
    get:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/count"
        responses:
          default:
            statusCode: "200"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/count"
        responses:
          default:
            statusCode: "200"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /{index}/scroll-search:
    post:
      parameters:
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "POST"
        uri: "http://${stageVariables.VPCNLB}/{index}/scroll-search"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      parameters:
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/{index}/scroll-search"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /{index}/search:
    get:
      parameters:
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/{index}/search"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    post:
      parameters:
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "POST"
        uri: "http://${stageVariables.VPCNLB}/{index}/search"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      parameters:
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/{index}/search"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /{index}/attribute-values:
    get:
      parameters:
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/{index}/attribute-values"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      parameters:
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/{index}/attribute-values"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /clear-docs/{index}/{identifier}/{scope}:
    post:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "scope"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "POST"
        uri: "http://${stageVariables.VPCNLB}/clear-docs/{index}/{identifier}/{scope}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
          integration.request.path.identifier: "method.request.path.identifier"
          integration.request.path.scope: "method.request.path.scope"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "scope"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/clear-docs/{index}/{identifier}/{scope}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
          integration.request.path.identifier: "method.request.path.identifier"
          integration.request.path.scope: "method.request.path.scope"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /{index}/mapping:
    get:
      parameters:
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/{index}/mapping"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      parameters:
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/{index}/mapping"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /search:
    get:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/search"
        responses:
          default:
            statusCode: "200"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    post:
      operationId: "search-post"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestJsonBody"
        required: true
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          content: {}
        "401":
          description: "401 response"
          content: {}
        "403":
          description: "403 response"
          content: {}
        "502":
          description: "502 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "POST"
        uri: "http://${stageVariables.VPCNLB}/search"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/search"
        responses:
          default:
            statusCode: "200"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /add/{identifier}/{index}/{scope}:
    post:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "scope"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "POST"
        uri: "http://${stageVariables.VPCNLB}/add/{identifier}/{index}/{scope}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
          integration.request.path.identifier: "method.request.path.identifier"
          integration.request.path.scope: "method.request.path.scope"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "scope"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/add/{identifier}/{index}/{scope}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
          integration.request.path.identifier: "method.request.path.identifier"
          integration.request.path.scope: "method.request.path.scope"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /add/{identifier}/{index}:
    post:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "POST"
        uri: "http://${stageVariables.VPCNLB}/add/{identifier}/{index}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
          integration.request.path.identifier: "method.request.path.identifier"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/add/{identifier}/{index}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
          integration.request.path.identifier: "method.request.path.identifier"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /clear-docs/{index}:
    post:
      parameters:
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "POST"
        uri: "http://${stageVariables.VPCNLB}/clear-docs/{index}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      parameters:
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/clear-docs/{index}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /:
    get:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/"
        responses:
          default:
            statusCode: "200"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/"
        responses:
          default:
            statusCode: "200"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    x-amazon-apigateway-any-method:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:450834107946:function:HuBMAP-API-Gateway-404/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /update/{identifier}/{index}:
    put:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "PUT"
        uri: "http://${stageVariables.VPCNLB}/update/{identifier}/{index}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
          integration.request.path.identifier: "method.request.path.identifier"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "index"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/update/{identifier}/{index}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.index: "method.request.path.index"
          integration.request.path.identifier: "method.request.path.identifier"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /mget:
    post:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "POST"
        uri: "http://${stageVariables.VPCNLB}/mget"
        responses:
          default:
            statusCode: "200"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/mget"
        responses:
          default:
            statusCode: "200"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /reindex/{identifier}:
    put:
      operationId: "reindex"
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "202":
          description: "202 response"
          content: {}
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "PUT"
        uri: "http://${stageVariables.VPCNLB}/reindex/{identifier}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.identifier: "method.request.path.identifier"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/reindex/{identifier}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.identifier: "method.request.path.identifier"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /status:
    get:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/status"
        responses:
          default:
            statusCode: "200"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/status"
        responses:
          default:
            statusCode: "200"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /add/{identifier}:
    post:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "POST"
        uri: "http://${stageVariables.VPCNLB}/add/{identifier}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.identifier: "method.request.path.identifier"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/add/{identifier}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.identifier: "method.request.path.identifier"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /indices:
    get:
      operationId: "get-indices"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MODEL701706"
        "400":
          description: "400 response"
          content: {}
        "401":
          description: "401 response"
          content: {}
        "403":
          description: "403 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/indices"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/indices"
        responses:
          default:
            statusCode: "200"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /update/{identifier}:
    put:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "PUT"
        uri: "http://${stageVariables.VPCNLB}/update/{identifier}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.identifier: "method.request.path.identifier"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/update/{identifier}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.identifier: "method.request.path.identifier"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /mapping:
    get:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/mapping"
        responses:
          default:
            statusCode: "200"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/mapping"
        responses:
          default:
            statusCode: "200"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
  /reindex-all:
    put:
      security:
      - HuBMAP-API-Gateway-Data-Admin-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "PUT"
        uri: "http://${stageVariables.VPCNLB}/reindex-all"
        responses:
          default:
            statusCode: "200"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
    options:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "PUT"
        uri: "http://${stageVariables.VPCNLB}/reindex-all"
        responses:
          default:
            statusCode: "200"
        connectionType: "VPC_LINK"
        passthroughBehavior: "when_no_match"
components:
  schemas:
    requestJsonBody:
      type: "object"
    MODEL701706:
      type: "object"
      properties:
        indices:
          type: "array"
          items:
            type: "string"
  securitySchemes:
    HuBMAP-API-Gateway-Read-Group-Authorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        type: "token"
        authorizerUri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:450834107946:function:HuBMAP-API-Gateway-Read-Group-Authorizer/invocations"
        authorizerResultTtlInSeconds: 0
    HuBMAP-API-Gateway-Data-Admin-Group-Authorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        type: "token"
        authorizerUri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:450834107946:function:HuBMAP-API-Gateway-Data-Admin-Group-Authorizer/invocations"
        authorizerResultTtlInSeconds: 0
x-amazon-apigateway-gateway-responses:
  RESOURCE_NOT_FOUND:
    statusCode: 404
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    responseTemplates:
      application/json: "{\"message\":$context.error.messageString}"
  UNAUTHORIZED:
    statusCode: 401
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    responseTemplates:
      application/json: "{ \"message\": \"$context.error.message\", \"hint\": \"$context.authorizer.key\"\
        , \"http_method\": \"$context.httpMethod\"}"
  ACCESS_DENIED:
    statusCode: 403
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    responseTemplates:
      application/json: "{ \"message\": \"$context.error.message\", \"hint\": \"$context.authorizer.key\"\
        , \"http_method\": \"$context.httpMethod\"}"
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
