openapi: "3.0.1"
info:
  title: "hs-ontology-api"
  description: "The UBKG API provides REST endpoints that return results from queries\
    \ against an instance of the [Unified Biomedical Knowledge Graph (UBKG)](https://ubkg.docs.xconsortia.org/).\
    \ To prevent exceeding service timeouts or payload limits, some endpoints are\
    \ throttled in both execution time and in the size of its response payload--e.g.,\
    \ to a maximum execution time of 15 seconds and a maximum payload of 9 MB."
  version: "2.1.2"
servers:
- url: "https://ontology.api.hubmapconsortium.org"
paths:
  /property-types:
    get:
      operationId: "property_types_get"
      responses:
        "500":
          description: "500 response"
          content: {}
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyTypes"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/property-types"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/property-types"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /sabs:
    get:
      operationId: "sabs_get"
      responses:
        "404":
          description: "404 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sabs"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/sabs"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/sabs"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /valueset:
    get:
      operationId: "valueset_get"
      parameters:
      - name: "parent_sab"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "child_sabs"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "parent_code"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfSabCodeTerm"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/valueset"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/valueset"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /genes-info:
    get:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/genes-info"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /assaytype/{name}:
    get:
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/assaytype/{name}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.name: "method.request.path.name"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/assaytype/{name}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.name: "method.request.path.name"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /terms/{term_id}/codes:
    get:
      operationId: "terms_term_id_codes_get"
      parameters:
      - name: "term_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfTermtypeCode"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/terms/{term_id}/codes"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.term_id: "method.request.path.term_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http"
    options:
      parameters:
      - name: "term_id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/terms/{term_id}/codes"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.term_id: "method.request.path.term_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /field-assays:
    get:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/field-assays"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/field-assays"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /concepts/{concept_id}/codes:
    get:
      operationId: "concepts_concept_id_codes_get"
      parameters:
      - name: "concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "sab"
        in: "query"
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/concepts/{concept_id}/codes"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.concept_id: "method.request.path.concept_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/concepts/{concept_id}/codes"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.concept_id: "method.request.path.concept_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /codes/{code_id}/terms:
    get:
      parameters:
      - name: "code_id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/codes/{code_id}/terms"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.code_id: "method.request.path.code_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "code_id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/codes/{code_id}/terms"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.code_id: "method.request.path.code_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /assaytype:
    get:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/assaytype"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/assaytype"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /codes/{code_id}/codes:
    get:
      operationId: "codes_code_id_codes_get"
      parameters:
      - name: "code_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "sab"
        in: "query"
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfCodesCodesObj"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/codes/{code_id}/codes"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.code_id: "method.request.path.code_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "code_id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/codes/{code_id}/codes"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.code_id: "method.request.path.code_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /concepts/{concept_id}/concepts:
    get:
      operationId: "concepts_concept_id_concepts_get"
      parameters:
      - name: "concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfSabRelationshipConceptTerm"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/concepts/{concept_id}/concepts"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.concept_id: "method.request.path.concept_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/concepts/{concept_id}/concepts"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.concept_id: "method.request.path.concept_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /field-descriptions:
    get:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/field-descriptions"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/field-descriptions"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /concepts/{concept_id}/nodeobjects:
    get:
      operationId: "concepts_concept_id_nodeobjects_get"
      parameters:
      - name: "concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConceptNodes"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/concepts/{concept_id}/nodeobjects"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.concept_id: "method.request.path.concept_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/concepts/{concept_id}/nodeobjects"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.concept_id: "method.request.path.concept_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /concepts/{concept_id}/paths/shortestpath/{terminus_concept_id}:
    get:
      operationId: "concepts_shortestpath_get"
      parameters:
      - name: "concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "rel"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "terminus_concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "sab"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConceptPaths"
        "400":
          description: "400 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/concepts/{concept_id}/paths/shortestpath/{terminus_concept_id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.concept_id: "method.request.path.concept_id"
          integration.request.path.terminus_concept_id: "method.request.path.terminus_concept_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "terminus_concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/concepts/{concept_id}/paths/shortestpath/{terminus_concept_id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.concept_id: "method.request.path.terminus_concept_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /node-types/{node_type}/counts-by-sab:
    get:
      operationId: "node_type_id_count_by_sab_get"
      parameters:
      - name: "node_type"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "sab"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeTypeSabCount"
        "400":
          description: "400 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/node-types/{node_type}/counts-by-sab"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.node_type: "method.request.path.node_type"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "node_type"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/node-types/{node_type}/counts-by-sab"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.node_type: "method.request.path.node_type"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /proteins/{id}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/proteins/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/proteins/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /codes/{code_id}/concepts:
    get:
      operationId: "codes_code_id_concepts_get"
      parameters:
      - name: "code_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfConceptDetail"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/codes/{code_id}/concepts"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.code_id: "method.request.path.code_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "code_id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/codes/{code_id}/concepts"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.code_id: "method.request.path.code_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /{proxy+}:
    x-amazon-apigateway-any-method:
      parameters:
      - name: "proxy"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:450834107946:function:HuBMAP-API-Gateway-404/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "nolktc"
        cacheKeyParameters:
        - "method.request.path.proxy"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /concepts/paths/subgraph/sequential:
    get:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/concepts/paths/subgraph/sequential"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/concepts/paths/subgraph/sequential"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /semantics/semantic-types/{identifier}:
    get:
      operationId: "semantics_semantic_types_identifier_get"
      parameters:
      - name: "skip"
        in: "query"
        schema:
          type: "string"
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "limit"
        in: "query"
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SemanticTypes"
        "400":
          description: "400 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/semantics/semantic-types/{identifier}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.identifier: "method.request.path.identifier"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/semantics/semantic-types/{identifier}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.identifier: "method.request.path.identifier"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /concepts/{concept_id}/paths/subgraph/sequential/sequential:
    get:
      parameters:
      - name: "concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/concepts/{concept_id}/paths/subgraph/sequential"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.concept_id: "method.request.path.concept_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/concepts/{concept_id}/paths/subgraph/sequential"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.concept_id: "method.request.path.concept_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /sabs/codes/counts:
    get:
      operationId: "sabs_codes_counts_get"
      parameters:
      - name: "skip"
        in: "query"
        schema:
          type: "string"
      - name: "limit"
        in: "query"
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SabCodeCounts"
        "400":
          description: "400 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/sabs/codes/counts"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/sabs/codes/counts"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /field-entities/{name}:
    get:
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/field-entities/{name}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.name: "method.request.path.name"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/field-entities/{name}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.name: "method.request.path.name"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /node-types/{node_type}/counts:
    get:
      operationId: "node_type_id_count_get"
      parameters:
      - name: "node_type"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeTypeCount"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/node-types/{node_type}/counts"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.node_type: "method.request.path.node_type"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "node_type"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/node-types/{node_type}/counts"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.node_type: "method.request.path.node_type"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /relationship-types:
    get:
      operationId: "relationship_types_get"
      responses:
        "500":
          description: "500 response"
          content: {}
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelationshipTypes"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/relationship-types"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/relationship-types"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /:
    get:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    x-amazon-apigateway-any-method:
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:450834107946:function:HuBMAP-API-Gateway-404/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /concepts/paths/subgraph:
    get:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/concepts/paths/subgraph"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/concepts/paths/subgraph"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /concepts/{concept_id}/paths/trees:
    get:
      operationId: "concepts_trees_get"
      parameters:
      - name: "mindepth"
        in: "query"
        schema:
          type: "string"
      - name: "limit"
        in: "query"
        schema:
          type: "string"
      - name: "rel"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "skip"
        in: "query"
        schema:
          type: "string"
      - name: "sab"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "maxdepth"
        in: "query"
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConceptPaths"
        "400":
          description: "400 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/concepts/{concept_id}/paths/trees"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.concept_id: "method.request.path.concept_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/concepts/{concept_id}/paths/trees"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.concept_id: "method.request.path.concept_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /sabs/{sab}/codes/details:
    get:
      operationId: "sabs_codes_details_sab_get"
      parameters:
      - name: "sab"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "skip"
        in: "query"
        schema:
          type: "string"
      - name: "limit"
        in: "query"
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SabCodeDetails"
        "400":
          description: "400 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/sabs/{sab}/codes/details"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.sab: "method.request.path.sab"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "sab"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/sabs/{sab}/codes/details"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.sab: "method.request.path.sab"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /concepts/{concept_id}/paths/subgraph/sequential:
    get:
      parameters:
      - name: "concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/concepts/paths/subgraph/sequential"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.concept_id: "method.request.path.concept_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/concepts/paths/subgraph/sequential"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.concept_id: "method.request.path.concept_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /concepts/{concept_id}/paths/expand:
    get:
      operationId: "concepts_concept_id_paths_expand_get"
      parameters:
      - name: "mindepth"
        in: "query"
        schema:
          type: "string"
      - name: "limit"
        in: "query"
        schema:
          type: "string"
      - name: "rel"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "skip"
        in: "query"
        schema:
          type: "string"
      - name: "sab"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "maxdepth"
        in: "query"
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConceptPaths"
        "400":
          description: "400 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/concepts/{concept_id}/paths/expand"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.concept_id: "method.request.path.concept_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/concepts/{concept_id}/paths/expand"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.concept_id: "method.request.path.concept_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /database/server:
    get:
      operationId: "database_info_server_get"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseInfo"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/database/server"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/database/server"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /node-types:
    get:
      operationId: "node_type_get"
      responses:
        "404":
          description: "404 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeTypes"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/node-types"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/node-types"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /field-assays/{name}:
    get:
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/field-assays/{name}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.name: "method.request.path.name"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/field-assays/{name}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.name: "method.request.path.name"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /sabs/{sab}/codes/counts:
    get:
      operationId: "sabs_codes_counts_sab_get"
      parameters:
      - name: "sab"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "skip"
        in: "query"
        schema:
          type: "string"
      - name: "limit"
        in: "query"
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SabCodeDetails"
        "400":
          description: "400 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/sabs/{sab}/codes/counts"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.sab: "method.request.path.sab"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "sab"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/sabs/{sab}/codes/counts"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.sab: "method.request.path.sab"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /celltypes/{id}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/celltypes/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/celltypes/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /field-entities:
    get:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/field-entities"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/field-entities"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /field-schemas:
    get:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/field-schemas"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/field-schemas"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /terms/{term_id}/concepts:
    get:
      operationId: "terms_term_id_concepts_get"
      parameters:
      - name: "term_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/terms/{term_id}/concepts"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.term_id: "method.request.path.term_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "term_id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/terms/{term_id}/concepts"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.term_id: "method.request.path.term_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /relationships/gene/{target_symbol}:
    get:
      parameters:
      - name: "target_symbol"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/relationships/gene/{target_symbol}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.target_symbol: "method.request.path.target_symbol"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "target_symbol"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/relationships/gene/{target_symbol}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.target_symbol: "method.request.path.target_symbol"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /field-descriptions/{name}:
    get:
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/field-descriptions/{name}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.name: "method.request.path.name"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/field-descriptions/{name}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.name: "method.request.path.name"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /field-types/{name}:
    get:
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/field-types/{name}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.name: "method.request.path.name"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/field-types/{name}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.name: "method.request.path.name"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /sabs/{sab}/term-types:
    get:
      operationId: "sabs_term_types_sab_get"
      parameters:
      - name: "sab"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "skip"
        in: "query"
        schema:
          type: "string"
      - name: "limit"
        in: "query"
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SabTermTypes"
        "400":
          description: "400 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/sabs/{sab}/term-types"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.sab: "method.request.path.sab"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "sab"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/sabs/{sab}/term-types"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.sab: "method.request.path.sab"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /assayclasses/{name}:
    get:
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/assayclasses/{name}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.name: "method.request.path.name"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/assayclasses/{name}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.name: "method.request.path.name"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /organs/by-code:
    get:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/organs/by-code"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/organs/by-code"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /concepts/{concept_id}/definitions:
    get:
      operationId: "concepts_concept_id_definitions_get"
      parameters:
      - name: "concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfSabDefinition"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/concepts/{concept_id}/definitions"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.concept_id: "method.request.path.concept_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "concept_id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/concepts/{concept_id}/definitions"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.concept_id: "method.request.path.concept_id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /organs:
    get:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/organs"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/organs"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /assayname:
    post:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "POST"
        uri: "http://${stageVariables.VPCNLB}/assayname"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/assayname"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /semantics/semantic-types:
    get:
      operationId: "semantics_semantic_types_get"
      parameters:
      - name: "skip"
        in: "query"
        schema:
          type: "string"
      - name: "limit"
        in: "query"
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SemanticTypes"
        "400":
          description: "400 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/semantics/semantic-types"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/semantics/semantic-types"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /celltypes-info:
    get:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/celltypes-info"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/celltypes-info"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /dataset-types:
    get:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/dataset-types"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/dataset-types"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /semantics/semantic-types/{identifier}/subtypes:
    get:
      operationId: "semantics_identifier_semantic_subtypes_get"
      parameters:
      - name: "skip"
        in: "query"
        schema:
          type: "string"
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "limit"
        in: "query"
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SemanticSubTypes"
        "400":
          description: "400 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/semantics/semantic-types/{identifier}/subtypes"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.identifier: "method.request.path.identifier"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "identifier"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/semantics/semantic-types/{identifier}/subtypes"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.identifier: "method.request.path.identifier"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /field-types-info:
    get:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/field-types-info"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/field-types-info"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /assayclasses:
    get:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/assayclasses"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/assayclasses"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /genes/{id}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/genes/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/genes/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /status:
    get:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/status"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/status"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /proteins-info:
    get:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/proteins-info"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/proteins-info"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /field-types:
    get:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/field-types"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/field-types"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /sources:
    get:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/sources"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/sources"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /field-schemas/{name}:
    get:
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/field-schemas/{name}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.name: "method.request.path.name"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "field-schemas${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/field-schemas/{name}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.name: "method.request.path.name"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
components:
  schemas:
    ArrayOfTermtypeCode:
      type: "array"
      items:
        $ref: "#/components/schemas/TermtypeCode"
    PropertyTypes:
      type: "object"
      properties:
        property_types:
          type: "array"
          description: "list of property types"
          items:
            type: "string"
            description: "a property type"
      description: "list of property types (keys)"
    SabRelationshipConceptTerm:
      type: "object"
      properties:
        sab:
          type: "string"
        relationship:
          type: "string"
        concept:
          type: "string"
        prefterm:
          type: "string"
    ArrayOfSabCodeTerm:
      type: "array"
      items:
        $ref: "#/components/schemas/SabCodeTerm"
    ConceptPaths:
      type: "object"
      properties:
        nodes:
          type: "array"
          description: "nodes involved in the set of paths"
          items:
            type: "object"
            properties:
              id:
                type: "string"
                description: "Concept Unique Identifier for the Concept node"
              name:
                type: "string"
                description: "preferred term for the Concept"
        edges:
          type: "array"
          description: "edges (relationships) involved in the set of paths"
          items:
            type: "object"
            properties:
              SAB:
                type: "string"
                description: "source for the relationship"
              source:
                type: "string"
                description: "Concept Unique Identifier (CUI) of the originating Concept\
                  \ node for the relationship"
              target:
                type: "string"
                description: "Concept Unique Identifier (CUI) of the terminating Concept\
                  \ node for the relationship"
              type:
                type: "string"
                description: "label for the relationship"
        paths:
          type: "array"
          description: "array of information on the set of paths in neo4j path format"
          items:
            type: "object"
            properties:
              start:
                type: "object"
                properties:
                  identity:
                    type: "integer"
                    description: "neo4j numeric identifier for node"
                    format: "int32"
                  elementId:
                    type: "string"
                    description: "identity, formatted as string"
                  labels:
                    type: "array"
                    description: "labels for the node"
                    items:
                      type: "object"
                  properties:
                    type: "array"
                    description: "properties for the node"
                    items:
                      type: "object"
                description: "origin Concept node of the path"
              end:
                type: "object"
                properties:
                  identity:
                    type: "integer"
                    description: "neo4j numeric identifier for node"
                    format: "int32"
                  elementId:
                    type: "string"
                    description: "identity, formatted as string"
                  labels:
                    type: "array"
                    description: "labels for the node"
                    items:
                      type: "object"
                  properties:
                    type: "array"
                    description: "properties for the node."
                    items:
                      type: "object"
                description: "terminal Concept node of the path"
              length:
                type: "number"
                description: "length of the path, in hops"
              segments:
                type: "array"
                description: "array of relationships in the path"
                items:
                  type: "object"
                  properties:
                    start:
                      type: "object"
                      properties:
                        identity:
                          type: "integer"
                          description: "neo4j numeric identifier for the node"
                          format: "int32"
                        elementId:
                          type: "string"
                          description: "identity formatted as string"
                        labels:
                          type: "array"
                          description: "labels for the node"
                          items:
                            type: "object"
                        properties:
                          type: "array"
                          description: "properties for the node"
                          items:
                            type: "object"
                      description: "origin of the relationship"
                    end:
                      type: "object"
                      properties:
                        identity:
                          type: "integer"
                          description: "neo4j numeric identifier for the node"
                          format: "int32"
                        elementId:
                          type: "string"
                          description: "identity formatted as string"
                        labels:
                          type: "array"
                          description: "labels for the node"
                          items:
                            type: "object"
                        properties:
                          type: "array"
                          description: "properties for the node"
                          items:
                            type: "object"
                        relationship:
                          type: "object"
                          properties:
                            identity:
                              type: "integer"
                              description: "neo4j numeric identifier for the relationship"
                              format: "int32"
                            elementId:
                              type: "string"
                              description: "identity, formatted as string"
                            start:
                              type: "integer"
                              description: "neo4j identifier for the start node of\
                                \ the relationship"
                              format: "int32"
                            startNodeElementID:
                              type: "string"
                              description: "start, formatted as string"
                            end:
                              type: "integer"
                              description: "neo4j identifier for the end node of the\
                                \ relationship"
                              format: "int32"
                            endNodeElementID:
                              type: "string"
                              description: "end, formatted as string"
                            type:
                              type: "string"
                              description: "the relationship type"
                            properties:
                              type: "array"
                              description: "properties of the relationship"
                              items:
                                type: "object"
                          description: "relationship between the start and end nodes"
                      description: "terminus of the relationship"
            description: "information on a single path"
      description: "Represents a graph for a set of paths that originate from a Concept\
        \ node."
    DatabaseInfo:
      type: "object"
      properties:
        version:
          type: "string"
          description: "neo4j version"
        edition:
          type: "string"
          description: "type of neo4j instance"
      description: "basic information on the neo4j database server instance"
    SabCodeTerm:
      type: "object"
      properties:
        sab:
          type: "string"
        code:
          type: "string"
        term:
          type: "string"
    ArrayOfSabRelationshipConceptTerm:
      type: "array"
      items:
        $ref: "#/components/schemas/SabRelationshipConceptTerm"
    SabCodeCounts:
      type: "object"
      properties:
        sabs:
          type: "array"
          description: "list of SABs"
          items:
            type: "object"
            properties:
              sab:
                type: "string"
                description: "source identifier"
              count:
                type: "string"
                description: "count of the codes in the SAB"
              position:
                type: "integer"
                description: "ordinal position of the sab in the endpoint's return,\
                  \ with respect to the _skip_ parameter"
                format: "int32"
            description: "a source (SAB)"
      description: "A set of information on a source (SAB), including counts by codes."
    SabDefinition:
      type: "object"
      properties:
        sab:
          type: "string"
        definition:
          type: "string"
    SemanticSubTypes:
      type: "object"
      properties:
        position:
          type: "integer"
          description: "absolute position of the Semantic Type in the list of all\
            \ possible values in the response. Invariant relative to skip--e.g., if\
            \ skip = 5, the position of the first element in the list will be 6."
          format: "int32"
        semantic_sub_types:
          type: "array"
          items:
            type: "object"
            properties:
              semantic_type:
                type: "object"
                properties:
                  def:
                    type: "string"
                    description: "the definition for the Semantic Type"
                  stn:
                    type: "string"
                    description: "the Semantic Type's identifier in the Semantic Type\
                      \ Network"
                  sty:
                    type: "string"
                    description: "the Semantic Type name"
                  tui:
                    type: "string"
                    description: "the Type Unique Identifier (TUI) for the Semantic\
                      \ Type node"
                description: "A Semantic Type node that is a sub-type of a specified\
                  \ Semantic Type node"
      description: "Array of Semantic Type nodes that are sub-types of a Semantic\
        \ Type"
    TermtypeCode:
      type: "object"
      properties:
        termtype:
          type: "string"
        code:
          type: "string"
    Sabs:
      type: "object"
      properties:
        sabs:
          type: "array"
          items:
            type: "string"
            description: "a source (SAB)"
      description: "The set of sources (SABs) for all Code nodes in the UBKG"
    SemanticTypes:
      type: "object"
      properties:
        position:
          type: "integer"
          description: "absolute position of the Semantic Type in the list of all\
            \ possible values in the response. Invariant relative to skip--e.g., if\
            \ skip = 5, the position of the first element in the list will be 6."
          format: "int32"
        semantic_types:
          type: "array"
          items:
            type: "object"
            properties:
              semantic_type:
                type: "object"
                properties:
                  def:
                    type: "string"
                    description: "the definition for the Semantic Type"
                  stn:
                    type: "string"
                    description: "the Semantic Type's identifier in the Semantic Type\
                      \ Network"
                  sty:
                    type: "string"
                    description: "the Semantic Type name"
                  tui:
                    type: "string"
                    description: "the Type Unique Identifier (TUI) for the Semantic\
                      \ Type node"
                description: "A Semantic Type node"
      description: "Array of Semantic Type nodes"
    ConceptDetail:
      type: "object"
      properties:
        concept:
          type: "string"
        prefterm:
          type: "string"
    CodesCodesObj:
      type: "object"
      properties:
        concept:
          type: "string"
        code:
          type: "string"
        SAB:
          type: "string"
    SabTermTypes:
      type: "object"
      properties:
        sab:
          type: "string"
          description: "identifier for a source"
        term_types:
          type: "array"
          description: "array of term types"
          items:
            type: "string"
            description: "the term type"
      description: "A set of term types (relationship types) for relationships that\
        \ originate from the Code nodes that are defined by a source (SAB)."
    RelationshipTypes:
      type: "object"
      properties:
        relationship_types:
          type: "array"
          description: "list of relationship types"
          items:
            type: "string"
            description: "relationship type"
      description: "list of relationship types"
    SabCodeDetails:
      type: "object"
      properties:
        codes:
          type: "array"
          description: "list of Codes"
          items:
            type: "object"
            properties:
              codeid:
                type: "string"
                description: "the CodeID of the Code, in format _SAB_:_CODE_."
              position:
                type: "integer"
                description: "the position of the Code in the endpoint's return, with\
                  \ respect to the _skip_ parameter"
                format: "int32"
              terms:
                type: "array"
                description: "set of terms associated with the Code."
                items:
                  type: "object"
                  properties:
                    term:
                      type: "string"
                      description: "the term string"
                    term_type:
                      type: "string"
                      description: "the term type for the term"
                  description: "a term for a Code"
            description: "a Code in a SAB"
      description: "A set of information on the Codes of a source (SAB)"
    ConceptNodes:
      type: "object"
      properties:
        nodes:
          type: "array"
          description: "Array of Concept node objects. Each Concept node object represents\
            \ a Concept node as the origin of a subgraph of linked Code, Term, Definition,\
            \ and Semantic Type nodes."
          items:
            type: "object"
            properties:
              node:
                type: "object"
                properties:
                  cui:
                    type: "string"
                    description: "the identifier for the Concept node"
                  pref_term:
                    type: "string"
                    description: "the preferred term for the Concept node, corresponding\
                      \ to a Term node that links to (has PREF_TERM relationship with)\
                      \ the Concept node."
                  codes:
                    type: "array"
                    description: "Array of Code objects. Each Code object represents\
                      \ a Code node that links to (has CODE relationship with) the\
                      \ Concept node and its associated Terms."
                    items:
                      type: "object"
                      properties:
                        codeid:
                          type: "string"
                          description: "the CodeID for the Code node, in format _SAB_:_CODE_"
                        sab:
                          type: "string"
                          description: "the identifier for the source (SAB) that defined\
                            \ the code"
                        terms:
                          type: "array"
                          description: "Array of Term nodes that link to the Code\
                            \ node."
                          items:
                            type: "object"
                            properties:
                              name:
                                type: "string"
                                description: "Term string"
                              tty:
                                type: "string"
                                description: "term type--i.e., the type of relationship\
                                  \ between the Term node and the Code node."
                  definitions:
                    type: "array"
                    description: "Array of Definition objects. Each Definition object\
                      \ represents a Definition node that links to (has DEF relationship\
                      \ with) the Concept node. (If a SAB assigns a definition to\
                      \ a code, the UBKG represents the definition as a Definition\
                      \ node linked to the Concept node to which the Code node links.)"
                    items:
                      type: "object"
                      properties:
                        def:
                          type: "string"
                          description: "the definition string"
                        sab:
                          type: "string"
                          description: "the identifier for the source (SAB) that provided\
                            \ the definition"
                  semantic_types:
                    type: "array"
                    description: "Array of Semantic Type objects. Each Semantic Type\
                      \ object represents a Semantic Type node that links to (has\
                      \ STY relationship with) the Concept node."
                    items:
                      type: "object"
                      properties:
                        def:
                          type: "string"
                          description: "the definition of the semantic type"
                        stn:
                          type: "string"
                          description: "the Semantic Type's identifier in the Semantic\
                            \ Type Network"
                        sty:
                          type: "string"
                          description: "the Semantic Type name"
                        tui:
                          type: "string"
                          description: "the Type Unique Identifier (TUI) for the Semantic\
                            \ Type node"
      description: "A set of \"Concept node\" objects that translate and consolidate\
        \ information about Concept nodes in the UBKG. Each Concept node in the UBKG\
        \ is the origin of a subgraph that links the Concept node to a set of Code,\
        \ Term, Definition, and Semantic Type nodes. The Concept node object represents\
        \ information extracted from all of the nodes in the Concept node's subgraph."
    NodeTypes:
      type: "object"
      properties:
        node_types:
          type: "array"
          items:
            type: "string"
            description: "node type"
      description: "The set of node types (labels) for all nodes in the UBKG"
    NodeTypeCount:
      type: "object"
      properties:
        node_types:
          type: "array"
          items:
            type: "object"
            properties:
              total_count:
                type: "integer"
                description: "Count of nodes with any of the labels in node_types.\
                  \ Equal to the total count of nodes in the database if no node_type\
                  \ was specified."
                format: "int32"
              node_type:
                type: "object"
                properties:
                  label:
                    type: "string"
                    description: "the label for the node type"
                  count:
                    type: "integer"
                    description: "count of nodes with the label"
                    format: "int32"
      description: "counts by node type"
    ArrayOfSabDefinition:
      type: "array"
      items:
        $ref: "#/components/schemas/SabDefinition"
    ArrayOfConceptDetail:
      type: "array"
      items:
        $ref: "#/components/schemas/ConceptDetail"
    ArrayOfCodesCodesObj:
      type: "array"
      items:
        $ref: "#/components/schemas/CodesCodesObj"
    NodeTypeSabCount:
      type: "object"
      properties:
        node_types:
          type: "array"
          items:
            type: "object"
            properties:
              total_count:
                type: "integer"
                description: "Count of nodes with any of the labels in node-types.\
                  \ Equal to the total count of nodes in the database if no filters\
                  \ were applied."
                format: "int32"
              node_type:
                type: "object"
                properties:
                  label:
                    type: "string"
                    description: "the label for the node type"
                  count:
                    type: "integer"
                    description: "count of nodes with the label"
                    format: "int32"
                  sabs:
                    type: "array"
                    description: "array of sources (SABs) for nodes with the specified\
                      \ node types"
                    items:
                      type: "object"
                      properties:
                        sab:
                          type: "string"
                          description: "source name"
                        count:
                          type: "integer"
                          description: "count of nodes from the SAB with the specified\
                            \ node type"
                          format: "int32"
      description: "counts by node type, grouped by SAB"
