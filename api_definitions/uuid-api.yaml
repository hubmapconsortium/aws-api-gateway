openapi: "3.0.1"
info:
  title: "HuBMAP UUID API"
  description: "The UUID API is a restful web service used to create and query UUIDs\
    \ used across HuBMAP."
  version: "2.3.3"
servers:
- url: "https://uuid.api.hubmapconsortium.org"
paths:
  /uuid/{id}/exists:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/uuid/{id}/exists"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/uuid/{id}/exists"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /uuid/{id}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/uuid/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/uuid/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /{uuid}:
    x-amazon-apigateway-any-method:
      parameters:
      - name: "uuid"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:450834107946:function:HuBMAP-API-Gateway-404/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /uuid:
    post:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "POST"
        uri: "http://${stageVariables.VPCNLB}/uuid"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /{uuid}/{proxy+}:
    x-amazon-apigateway-any-method:
      parameters:
      - name: "proxy"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "uuid"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:450834107946:function:HuBMAP-API-Gateway-404/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "6phl87"
        cacheKeyParameters:
        - "method.request.path.proxy"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /file-id/{uuid}:
    get:
      parameters:
      - name: "uuid"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdObject"
        "400":
          description: "400 response"
          content: {}
        "401":
          description: "401 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/file-id/{uuid}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.uuid: "method.request.path.uuid"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "uuid"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/file-id/{uuid}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.uuid: "method.request.path.uuid"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /hmuuid/{id}/exists:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          content: {}
        "401":
          description: "401 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/hmuuid/{id}/exists"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/hmuuid/{id}/exists"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /{uuid}/files:
    get:
      parameters:
      - name: "uuid"
        in: "path"
        required: true
        schema:
          type: "string"
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/{uuid}/files"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.uuid: "method.request.path.uuid"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "uuid"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/{uuid}/files"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.uuid: "method.request.path.uuid"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /:
    get:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    x-amazon-apigateway-any-method:
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:450834107946:function:HuBMAP-API-Gateway-404/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /status:
    get:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/status"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/status"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /{uuid}/ancestors:
    get:
      parameters:
      - name: "uuid"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/{uuid}/ancestors"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.uuid: "method.request.path.uuid"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "uuid"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/{uuid}/ancestors"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.uuid: "method.request.path.uuid"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /hmuuid/{id}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdObject"
        "401":
          description: "401 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
        "403":
          description: "403 response"
          content: {}
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/hmuuid/{id}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/hmuuid/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
  /hmuuid:
    post:
      parameters:
      - name: "entity_count"
        in: "query"
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MODEL8dd1a8"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdObject"
        "400":
          description: "400 response"
          content: {}
        "401":
          description: "401 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "POST"
        uri: "http://${stageVariables.VPCNLB}/hmuuid"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
components:
  schemas:
    IdObject:
      type: "object"
      properties:
        ancestor_id:
          type: "string"
          description: "The uuid of the ancestor."
        ancestor_ids:
          type: "array"
          description: "The list of the ancestor uuids."
          items:
            type: "string"
        email:
          type: "string"
          description: "The email of id creator."
        hm_uuid:
          type: "string"
          description: "Standard randomly generated 128 bit UUIDs represented as 32\
            \ hexadecimal digits"
        hubmap_id:
          type: "string"
          description: "A randomly generated unique id that can be used to construct\
            \ a HuBMAP DOI in the format"
        submission_id:
          type: "string"
          description: "The submission id (e.g., UFL0007). For Collection/Dataset/Activity/Upload,\
            \ no submission_id gets generated"
        time_generated:
          type: "string"
          description: "The readable time when this id gets generated, e.g., 2021-09-01\
            \ 21:32:39"
        type:
          type: "string"
          description: "One of the supported types"
          enum:
          - "ACTIVITY"
          - "SAMPLE"
          - "DONOR"
          - "DATASET"
          - "COLLECTION"
          - "UPLOAD"
          - "REFERENCE"
          - "AVR"
        user_id:
          type: "string"
          description: "The user's globus id, e.g., 694c6f6a-1deb-41a6-880f-d1ad8af3705f"
    MODEL8dd1a8:
      type: "object"
      properties:
        entity_type:
          type: "string"
          description: "One of the supported types"
          enum:
          - "ACTIVITY"
          - "SAMPLE"
          - "DONOR"
          - "DATASET"
          - "COLLECTION"
          - "UPLOAD"
          - "REFERENCE"
          - "AVR"
        parent_ids:
          type: "array"
          description: "Required for entity types of SAMPLE, DONOR and DATASET an\
            \ array of UUIDs for the ancestors of the new entity For SAMPLEs and DONORs\
            \ a single uuid is required (one entry in the array) and multiple ids\
            \ are not allowed (SAMPLEs and DONORs are required to have a single ancestor,\
            \ not multiple).  For DATASETs at least one ancestor UUID is required,\
            \ but multiple can be specified. (A DATASET can be derived from multiple\
            \ SAMPLEs or DATASETs.)"
          items:
            type: "string"
        organ_code:
          type: "string"
          description: "Required only in the case where an id is being generated for\
            \ a SAMPLE that has a DONOR as a direct ancestor.  Must be one of the\
            \ codes from: https://github.com/hubmapconsortium/search-api/blob/test-release/src/search-schema/data/definitions/enums/organ_types.yaml"
        file_info:
          type: "object"
          description: "Required only if the entity type is FILE. A list/array of\
            \ information about each file that requires an id to be generated for\
            \ it. The size of this array is required to match the optional URL argument,\
            \  entity_count (or be 1 in the case where this argument is defaulted\
            \ to 1). Each file info element should contain: path- required: the path\
            \ to the file in storage.  For the purposes of the UUID system this can\
            \ be a full path or relative, but it is recommended that a relative path\
            \ be used. The path attribute can contain an optional \"<uuid>\" tag,\
            \ which will be replaced by the generated file uuid before being stored.\
            \ This is useful in the case where the path to the file will include the\
            \ file uuid, such as for files uploaded via the ingest portal. base_dir-\
            \ required: a specifier for the base directory where the file is stored\
            \ valid values are: DATA_UPLOAD or INGEST_PORTAL_UPLOAD\nchecksum- optional:\
            \ An MD5 checksum/hash of the file size- optional: The size of the file\
            \ as an integer"
  securitySchemes:
    HuBMAP-API-Gateway-Read-Group-Authorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        authorizerUri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:450834107946:function:HuBMAP-API-Gateway-Read-Group-Authorizer/invocations"
        authorizerResultTtlInSeconds: 0
        type: "token"
x-amazon-apigateway-gateway-responses:
  UNAUTHORIZED:
    statusCode: 401
    responseTemplates:
      application/json: "{ \"message\": \"$context.error.message\", \"hint\": \"$context.authorizer.key\"\
        , \"http_method\": \"$context.httpMethod\"}"
  RESOURCE_NOT_FOUND:
    statusCode: 404
    responseTemplates:
      application/json: "{\"message\":$context.error.messageString}"
  ACCESS_DENIED:
    statusCode: 403
    responseTemplates:
      application/json: "{ \"message\": \"$context.error.message\", \"hint\": \"$context.authorizer.key\"\
        , \"http_method\": \"$context.httpMethod\"}"
